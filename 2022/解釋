  
*SDLC   
*CMMI(軟體能力成熟度)
1.初始級  
2.管理級  
3.定義級  
4.量化管理級  
5.最佳化級
     
//RUP  (物件導向開發方法論)  
//waterfall model(瀑布)  
//spiral model(螺旋)  

*SDL(security DirectMedia Layer)  
=>軟體設計時開發威脅模型，實作時使用靜態分析程式碼檢測  
1.安全培訓  
2.需求分析  
3.系統設計  
4.實作  
5.驗證  
6.發行  
7.回應

DeVOPS  
CI(持續整合)  
=>減少部屬工作量  
CD(持續部屬)  
=>
  
**軟體測試**  
(1.)單元測試(unit test)    
=>程式設計師自己測試  
(2.)功能測試(function test)      
=>軟體品保工程師進行  
(3.)整合測試(integration test)    
=>程式設計師或軟體品保工程師進行  
(4.)驗收測試(user acceptance test)     
=>使用者進行  

白箱測試(原始碼檢測)    
=>公開透明的程式碼  
1.基本路徑測試
=>運用基本路徑確保程式的每一條路徑都被測試到
2.資料流測試
=>所有引用資料的地方至少須備測試一次以上 
  
黑箱測試(滲透測試)    
=>隱藏的程式碼  
灰箱測試
=>半黑半白

**建構項目(configuration items)**    
軟體建構管理  
=>協調開發週期相關的管理工作，避免版本錯誤或混亂  
(1.)建構識別  
(2.)建構控制  
(3.)建構狀態紀錄  
(4.)建構稽核  

**SSDLC**
(1)安全性目標是甚麼?  
(2.)如何將安全性整合到開發流程中?  
(3.)如何提升安全性同時減少其對系統再造成的影響? 
(4.)安全性功能或措施如何和其他軟體整合?  
(5.)所產出的規劃文件是否反映出與安全性目標的整體觀點?   
(6.)進行安全性與隱私性的風險評估  
""安全性功能""=>只有功能沒安全  


**設計階段**
安全性的角度定義軟體的整體結構
分析軟體受攻擊的層面  
威脅模擬  

**實作階段**
遵循程式撰寫標準  
進行原始碼檢測
採用軟體安全測試標準

**確認階段**
準預覽版本(pre-alpha)  
=>功能不完整  
預覽版本(alpha)  
測試版本(beta)  
=>具備所有功能
最終測試版本(Released candidate)(RC)  

**確認階段**
安全性檢測

**發行階段**
最終安全性審查
=>確認是否可以交付  
**支援與服務階段**
嚴謹的開發流程能從根本上排除軟體弱點

**服務等級合約(SLA)**
(1.)系統上線時間
(2.)系統連續停止運作時間
(3.)尖峰容量
(4.)平均負載
(5.)診斷責任
(6.)故障復原時間
